1. char[] ch = sc.nextLine().toCharArray();

2. 最小公倍数： 辗转相除  
          当小不为0  
            余数 = 大%小
            大 = 小
            小 = 余
       最后大数是 最大公倍数
3.最大公约数: 大数*小数 / 最小公倍数 ；

4.新版杨辉三角形 有规律可循

5.m苹果放到n个碗里 p（m，n）

  可分成 1.有1个空碗 p（m，n-1）
         2.没有空碗  p（m-n，n）
         则 p（m，n）  =  p（m，n-1） +p（m-n，n）
 
          m=0是 返回 0
          m=1 或 n = 1 时 ， 返回 1

6.检测回文
  反转部分字符串，查看原字符串是否存在匹配

7.闰年
  即四年一闰，百年不闰，四百年再闰。

8.Scanner
  hasNext（）检测有没有输入， 但光标一直在输入之前
  nextInt（）获取输入，并将光标移植输入之后。 如不用nextInt（），则hasNext（）移植为True

9. 整数Char相加，其实加的是asci码
   int a = '4'+'8';  结果108

10.HasSet :不保证 set 的迭代顺序,就是每次遍历的顺序可能不同
   LinkedHashSet ：将元素插入到 set 中的顺序（插入顺序）进行迭代。

11.Java replaceAll() 方法用四个\ 表示一个\
   java中， \\\\解析为\\交给正则表达式，正则表达式将\\转换成\
   例： \. 需要用\\\\. 表示


   [\\\\w] : 任意数字，英文，下划线
   [\\\\w]{1} :一个任意数字，英文，下划线
   [\\\\w]{1，} :至少1个任意数字，英文，下划线

12.final, finally, finalize的区别
final:最终的意思，可以修饰类，方法和变量。
	它修饰的类，不能被继承
	它修饰的方法，不能被重写
	它修饰的变量，不能被改变
finally:是异常处理的一部分，用于释放资源的。它控制的代码永远会执行。
特殊情况：在执行到finally之前，JVM退出了。
finalize:是Object类的一个方法，用于垃圾回收。

13   Math.round 四舍五入
     Math.ceil  顶
     Math.floor 底

14.short s1 = 1; s1 = s1 + 1;   s1会自动提升为int类型，结果赋值给short类型，所以报错。
   short s1 = 1; s1 += 1;       +=这种赋值运算符隐含了强制类型转换。

15.try {}里有一个return语句，try后的finally {}里的code会在return之前运行

16. switch
    byte  可以
    long  不可以
    String JDK7之后可以

17.编写.JAVA文件，编译得到. Class字节码文件，交给JVM运行

18.方法可以和class同名，此时和构造方法唯一的区别就是，构造方法没有返回值

19.抽象方法没有body部分，也没有大括号{ }
   abstract void eat();      //定义抽象方法

20.数组是对象

21.interface 是public的， 加不加都是public

22.面向对象特点
    抽象
    继承
    封装
    多态

23.clone()  返回Object对象， 创建新的引用。
   Person p = new Person(23, "zhang");  
   Person p1 = (Person) p.clone();  
   p和p1指向不同的对象

24.重写Overriding是父类与子类之间多态性的一种表现，
   重载Overloading是一个类中多态性的一种表现。

25.java.lang.String类是final类型的，因此不可以继承这个类、不能修改这个类。

26.String s = new String("xyz");创建了2个String Object? 
    一个在常量池，另一个在堆里。

27.静态方法不可以被重写
   
28.static 方法里只能调用其他的static方法

29.遍历TreeMap
  Map map<Integer>=new TreeMap<Integer>();//创建集合对象
  Set<Integer> ir=map.keySet()   //获取hashMap的键值
  for(int key:set){
        System.out.println("键为"+key+"所对应的值为"+map.get(key));
   }

30.Char String 相互转换
   String转char
	1. 使用String.charAt(index)（返回值为char） 
	2. 使用String.toCharArray()（返回值为char[]）
   char转String
	1. String s = String.valueOf('c'); //效率最高的方法
	2. String s = String.valueOf(new char[]{'c'}); //将一个char数组转换成String
	3. String s = Character.toString('c');
	4. String s = new Character('c').toString();
	5. String s = "" + 'c';		// 虽然这个方法很简单，但这是效率最低的方法
	6. String s = new String(new char[]{'c'});

31.运行时异常与编译异常（异常：Exception）
   异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，
   是一种常见运行错误。java编译器要求方法必须声明抛出可能发生的非运行时异常，
   但是并不要求必须声明抛出未被捕获的运行时异常。

   编译期异常： 必须要处理的，否则编译不通过
   运行期异常： 可以不处理，也可以处理

32.throws,throw,try,catch,finally
   在Java中，每个异常都是一个对象，它是Throwable类或其它子类的实例。
   一般情况下是用try来执行一段程序，如果出现异常，系统会抛出（throws）一个异常，
   这时候你可以通过它的类型来捕捉（catch）它，或最后（finally）由缺省处理器来处理。
   
   throw：在方法体内,后面跟的是异常对象名,并且只能是一个
	  throw抛出的是一个异常对象，说明这里肯定有一个异常产生了。
   throws：在方法声明上,后面跟的是异常的类名,可以是多个
           throws是声明方法有异常，是一种可能性，这个异常并不一定会产生。
   Finally：用于释放资源，它的代码永远会执行。。

33.heap和stack有什么区别。
   栈是一种线形集合，其添加和删除元素的操作应在同一段完成。栈按照后进先出的方式进行处理。
   堆是栈的一个组成元素

34.垃圾回收
   finalize ：Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法
   GC：Java提供的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的。
   垃圾回收器通常是作为一个单独的低级别的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清楚和回收
   程序员可以手动执行System.gc()，通知GC运行，但是Java语言规范并不保证GC一定会执行。

35.线程
   sleep() 和 wait() 有什么区别
   sleep是线程类（Thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用sleep不会释放对象锁。
   wait是Object类的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法（或notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。

   run()和start()
   启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM调度并执行。这并不意味着线程就会立即运行。
   run()方法可以产生必须退出的标志来停止一个线程。

   线程同步的方法
   wait():使一个线程处于等待状态，并且释放所持有的对象的lock。
   sleep():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉InterruptedException异常。
   notify():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且不是按优先级。
   //当另一个线程执行notify();，会唤醒ThreadA，但是此时它并不立即释放。另一个线程退出synchronized修饰的临界区时，才会把锁释放
   Allnotity():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争。
   

   多线程实现方法：继承Thread类与实现Runnable接口
   同步实现方法： 是synchronized,wait与notify，lock
   
   Java中的线程有四种状态分别是：运行、就绪、挂起、结束。

36.内部类
   一个内部类对象可以访问创建它的外部类对象的内容
   内部类实例化：
   Outer outer = new Outer();
   Inner inner = outer.new Inner();

37.抽象类和接口
   接口 ：所有方法都是抽象的
          所有成员变量都是static final
   